# disable test containers
quarkus.devservices.enabled=false


# jdbc:db-order//
quarkus.datasource.db-restaurant.db-kind=postgresql
quarkus.datasource.db-restaurant.username=guest
quarkus.datasource.db-restaurant.password=welcome1
quarkus.datasource.db-restaurant.jdbc.url=jdbc:postgresql://localhost:5432/postgres?escapeSyntaxCallMode=callIfNoReturn
#&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
quarkus.datasource.db-restaurant.jdbc.max-size=16
#quarkus.datasource.db-order.flush-on-close=true

# RestaurantInfo Camel SQL Expression
spEL.sym=$

restaurantInfo.camel.sql.spEL=sql:classpath:templates/findRestaurantsAndProductsInformation.sql
joinedProductIds.camel.spEL=joinedProductIds(${spEL.sym}{body.orderDetail.products})
sendOrderApprovalEventCopy.spEL=seda:orderApprovalEventMessage;
#?outputType=StreamList&outputClass=com.food.ordering.system.order.service.application.service.dto.create.RestaurantProductsInfoDTO

# doesn't work
#camel.component.kafka.additional-properties=num.of.partitions=3
#camel.component.kafka.additional-properties=replication.factor=3
#camel.component.kafka.number-of-partitions=3
#camel.component.kafka.replication-factor=3

#kafka:common:properties
camel.component.kafka.brokers=localhost:9092
camel.component.kafka.schema-registry-u-r-l=http://localhost:8081
camel.component.kafka.key-serializer=org.apache.kafka.common.serialization.StringSerializer
camel.component.kafka.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# kafka:producer:config:data:properties
camel.component.kafka.requestRequiredAcks=all
camel.component.kafka.compression-codec=snappy
camel.component.kafka.request-required-acks=all
camel.component.kafka.producer-batch-size=16384
camel.component.kafka.linger-ms=5
camel.component.kafka.request-timeout-ms=6000
camel.component.kafka.retries=5

# kafka:consumer:config:data:properties
camel.component.kafka.groupId=restaurant-approval-topic-consumer
camel.component.kafka.autoOffsetReset=earliest
camel.component.kafka.batching=true
camel.component.kafka.additional-properties=auto-startup=true
#The number of consumers that connect to kafka server. Each consumer is run on a separate
# thread that retrieves and process the incoming data.
camel.component.kafka.consumersCount=3
camel.component.kafka.sessionTimeoutMs=10000
camel.component.kafka.heartbeatIntervalMs=3000
camel.component.kafka.maxPollRecords=500
camel.component.kafka.maxPollIntervalMs=300000
camel.component.kafka.fetchMaxBytes=1048576
camel.component.kafka.pollTimeoutMs=150
